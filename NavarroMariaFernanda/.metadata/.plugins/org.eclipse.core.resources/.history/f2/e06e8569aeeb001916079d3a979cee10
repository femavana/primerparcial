/*
 * arrayEmployees.h
 *
 *  Created on: sep.2019
 *      Author: Navarro Mar√≠a Fernanda
 */

#include <stdio.h>
#include <stdio_ext.h>
#include <stdlib.h>
#include <string.h>
#include "clientes.h"
#include "getInput.h"
#define CANT_CLIENTES 100
#define CANT_PEDIDOS 1000
#define TRUE 0
#define FALSE 1

void menu()
{
	printf("\n");
	printf("\n");
	printf("______________________");
	printf("\n1-Alta_Cliente");
	printf("\n2-Modificar_Datos_Client");
	printf("\n3-Baja_Cliente");
	printf("\n4-Crear_Pedido_de_Recoleccion");
	printf("\n5-Procesar_Reciduos");
	printf("\n6-Imprimir_Clientes");
	printf("\n7-Imprimir_Pedidos_Pendientes");
	printf("\n8-Imprimir_Pedidos_Procesados");
	printf("\n9-Salir");
	printf("\n____________________________________ ");
}
void subMenuInfo()
{
	printf("\n");
	printf("\n");
	printf("_____________________________________");
	printf("\n1-Listar empleados alfabeticamente por apellido y sector");
	printf("\n2-Total y promedio de los salarios");
	printf("\n3-Total empleados que superan el salario promedio");
	printf("\n4-Volver a menu principal");
	printf("\n_________________________________");
}

void subMenuChange()
{
	printf("\n");
	printf("___________________________________");
	printf("\n1-Cambiar direccion");
	printf("\n2-Cambiar localidad");
	printf("\n5-Volver a menu principal");
	printf("\n_________________________________");
}

int init(Clients* client,int size)
{
	int ret=-1;
	int i;
	if(client!= NULL && size > 0 )
	{
	 for(i=0;i<size;i++)
	 {
	 client[i].isEmpty=TRUE;
	 }
	 ret=0;
	}
return ret;
}

int print(Clients* client,int size)
{
	int ret=-1;
	int i;

	if(client!= NULL && size > 0)
	{
	if(sortByLastName(client,size)==0)
	{
	for(i=0;i<size;i++)
    {
	   if(client[i].isEmpty == FALSE)
		{
		printf("____________________________________________________________________");
		printf("\nidClient:%d \nCUIT:%d \nNombre_Empresa:%s \nDireccion:%s \nLocalidad:%s\n",
		client[i].idCliente,client[i].cuit,client[i].nombreEmpresa,
		client[i].direccion,client[i].localidad);
		printf("____________________________________________________________________\n");
		}
	}
	}

	ret=0;
	}
return ret;
}

int printPosition(Clients* client,int size,int position)
{
	int ret=-1;
	if(client!= NULL && size > 0 && client[position].isEmpty == FALSE)
	{
		if(client[position].isEmpty == FALSE)
		{
				printf("____________________________________________________________________");
				printf("\nidClient:%d \nCUIT:%d \nNombre_Empresa:%s \nDireccion:%s \nLocalidad:%s\n",
				client[position].idCliente,client[position].cuit,client[position].nombreEmpresa,
				client[position].direccion,client[position].localidad);
				printf("____________________________________________________________________\n");
				}
		ret=0;
	}
return ret;
}

int add(Clients* client,int size,int *clientCount)
{
	int ret=-1;
    int freePosition;
    char nombreEmpresa[51];
    char direccion[51];
    char localidad[51];
    int cuit;

	if(client!= NULL && size > 0 )
	{
	   if(searchFreeSpace(client,size,&freePosition)==0)
	   {
	    (*clientCount)++;
		getStrChar(nombreEmpresa,"\nIngrese el nombre de la empresa: ","\nError!!.Ingrese solo letras",3,51,2);
		getString(direccion,"Ingrese direccion de la empresa: ","\nError!!.",3,51,2);
		getStrChar(localidad,"Ingrese localidad de la empresa: ","\nError!!.Ingrese solo numeros",1,500000,2);
		getInt(&cuit,"Ingrese el CUIT de la empresa: ","\nError!!.Ingrese solo numeros",1,10000,2);
        client[freePosition].idCliente=*clientCount;
        client[freePosition].cuit=cuit;
		strcpy(client[freePosition].localidad,localidad);
		strcpy(client[freePosition].direccion,direccion);
		strcpy(client[freePosition].nombreEmpresa,nombreEmpresa);
	    client[freePosition].isEmpty=FALSE;
		ret=0;
		printPosition(client,size,freePosition);
	   }
		else
		{
			printf("\nNo hay mas lugar!!!");
		}
    }
return ret;
}

int searchFreeSpace(Clients* client,int size,int *freePosition)
{
 int i;
 int ret=-1;

 if(client!= NULL && size > 0 )
 {
     for(i=0;i<size;i++)
 		{
 			if(client[i].isEmpty==TRUE)
 			{
 				ret=0;
 			    *freePosition=i;
 			}
 		}
 }
return ret;
}

int changeById(Clients* client, int size,int clientCount)
{
    int ret=-1;
    int position;
    int option;
    char direccion[51];
    char localidad[51];

	   if(client!=NULL && size>0 && loaded(client,size,clientCount)==0)
       {
    	    if(findById(client,size,&position)==0)
    	   {
    	    do{
        	 subMenuChange();
        	 getInt(&option,"\n\nIngrese una opcion:","\n\tERROR!!.Opcion invalida\n",1,3,2);
        	   switch(option)
        	  {
        	  case 1:
        	  printf("\n__Cambiar direccion__");
              getStrChar(direccion,"\nIngrese la nueva direccion: ","\nError!!.",3,51,2);
              strcpy(client[position].direccion,direccion);
        	  break;
        	  case 2:
        	  printf("\n__Cambiar localidad__");
        	  getStrChar(localidad,"\nIngrese la nueva localidad: ","\nError!!.Ingrese solo letras",3,51,2);
        	  strcpy(client[position].localidad,localidad);
        	  break;
        	  }
        	   if(option!=3)
        	   {printf("El cambio fue exitoso!!\n");
        	    printPosition(client,size,position);
        	    ret=0;
        	    break;
        	   }
		    }while(option!=5);
  		    }
    	    else
            {
        	printf("No existe el id ingresado!!");
            }
       }
 return ret;
}

int removeById(Clients* client, int size,int *clientCount)
{
    int ret=-1;
    int position;
    int contadorId=*clientCount;

    if(client!=NULL && size>0 && loaded(client,size,contadorId)==0)
    {
        if(findEmployeeById(client,size,&position)==0)
        {
        	(*clientCount)--;
            client[position].idCliente=0;
            client[position].isEmpty=TRUE;
            client[position].cuit=0;
            strcpy(client[position].direccion,"");
            strcpy(client[position].localidad,"");
            strcpy(client[position].nombreEmpresa,"");
            ret=0;
            printf("La baja fue exitosa!!");
        }
        else
        {
        	printf("No existe el ID ingresado");
        }
    }
 return ret;
}

int findById(Clients* client,int size,int *position)
{
    int ret=-1;
    int i;
    int idCliente;

    if(client!= NULL && size>=0)
    {
    	print(client,size);
    	getInt(&idCliente,"\n\nIngrese el ID del cliente: ","\nERROR.",1,100,2);
        for(i=0;i<size;i++)
        {
            if(client[i].isEmpty == FALSE && client[i].idCliente==idCliente)
            {
            	*position=i;
                ret=0;
                break;
            }
            else
            {
                 continue;
            }
        }
    }
return ret;
}

int loaded(Clients* client,int size,int clientCount)
{
	int ret=-1;
    int i;
    if(client!= NULL && size > 0 )
	{
	for(i=0;i<size;i++)
	{
	  if(client[i].isEmpty == TRUE && clientCount ==0 )
	  {
		  printf("\nError!!.No hay clientes cargados");
		  break;
	  }
	  else
	  {
		    ret=0;
		  continue;
	  }
	 }
	 }
return ret;
}

/*
int averageSalaryEmployee(Clientes* personalData,int size,int counterId,int *average)
{
    int ret=-1;
    int i;
    float totalSalary=0;

    if(personalData!= NULL && size>=0)
    {
        for(i=0;i<size;i++)
        {
            if(personalData[i].isEmpty == FALSE)
            {
            	totalSalary=totalSalary+personalData[i].salary;
            }
        }
     ret=0;
     *average= (int)totalSalary/counterId;
     printf("\nLa suma total de los salarios es: %.2f",totalSalary);
     printf("\nEl salario promedio es: %d",*average);
     }
return ret;
}

int sortSalaryEmployee(Clientes* personalData,int size,int average)
{
    int ret=-1;
    int i;
    int totalEmployee=0;


    if(personalData!= NULL && size>=0)
    {
        for(i=0;i<size;i++)
        {
            if(personalData[i].salary > average && personalData[i].isEmpty == FALSE)
            {
            	totalEmployee++;
            	ret=0;
                break;
            }
        }
     printf("\nEl total de empleados que superan el salario promedio es: %d",totalEmployee);
     }
return ret;
}

int searchByName(Clientes* personalData,int size,int *position)
{
    int ret=-1;
    int i;
    char nameEmployee[CANT];

    if(personalData!= NULL && size>=0)
    {
    	getStrChar(nameEmployee,"\nIngrese el nombre del empleado: ","\nError!!.Ingrese solo letras",3,CANT,2);
        for(i=0;i<size;i++)
        {
            if(personalData[i].isEmpty==FALSE && strcmp(personalData[i].name,nameEmployee)==0)
            {
            	*position=i;
                ret=0;
                break;
            }
            else
            {
            	continue;
            }
        }
    }
return ret;
}

int reportEmployee(Clientes* personalData, int size,int counterId)
{
    int ret=-1;
    int option;
    int average;

       if(personalData!=NULL && size>0 && loadedEmployee(personalData,size,counterId)==0)
       {
    	    do{
    	     subMenuInfo();
        	 getInt(&option,"\n\nIngrese una opcion:","\nERROR!!.Opcion no valida\n",1,4,2);
        	   switch(option)
        	  {
        	   case 1:
        	   printf("__Listar empleados alfabeticamente por Apellido y sector__\n");
        	   sortEmployee(personalData,size);
        	   printClientes(personalData,size);
        	   break;
        	   case 2:
        	   printf("__Total y promedio de los salarios__\n");
        	   averageSalaryEmployee(personalData,size,counterId,&average);
        	   break;
        	   case 3:
        	   printf("__Total empleados que superan el salario promedio__\n");
        	   sortSalaryEmployee(personalData,size,average);
        	   break;
        	  }
        	  if(option!=4)
        	  {
        	  ret=0;
        	  break;
        	  }
		    }while(option!=4);
       }
 return ret;
}

int sortEmployee(Clientes* personalData, int size)
{
	int i;
	int j;
	int ret=-1;
	Employee auxiliar;
	if(personalData!= NULL && size>=0)
    {
       for(i=0;i<size-1;i++)
	   {
    	 if(personalData[i].isEmpty == FALSE)
    	 {
    	   	     continue;
    	 }
	   for(j=i+1;j<size;j++)
	   {
		  if(personalData[j].isEmpty == FALSE)
		  {
		  continue;
		  }
		 if(strcmp(personalData[j].lastName,personalData[i].lastName)>0 && personalData[i].sector > personalData[j].sector)
	    {
			           auxiliar = personalData[j];
					   personalData[j] = personalData[i];
					   personalData[i] = auxiliar;
		}
	     }
	    }
       ret=0;
	   }
return ret;
}
*/
