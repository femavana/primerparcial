
#include <stdio.h>
#include <stdio_ext.h>
#include <stdlib.h>
#include <string.h>
#include "clientes.h"
#include "pedidos.h"
#include "getInput.h"
#define CANT_CLIENTES 100
#define CANT_PEDIDOS 1000
#define TRUE 0
#define FALSE 1
#define ESTADO_PENDIENTE 1
#define ESTADO_COMPLETADO 0

void subMenuPedido()
{
	printf("\n");
	printf("\n");
	printf("_____________________________________");
	printf("\n1-Alta_pedido");
	printf("\n2-Modificar_pedido");
	printf("\n3-Baja_pedido");
	printf("\n4-Volver a menu principal");
	printf("\n_________________________________");
}

void subMenuChangePedido()
{
	printf("\n");
	printf("___________________________________");
	printf("\n1-Cambiar idCliente");
	printf("\n2-Cambiar cantidad Recoleccion");
	printf("\n5-Volver a menu principal");
	printf("\n_________________________________");
}

int initPedido(Pedidos* pedido,int size)
{
	int ret=-1;
	int i;
	if(pedido!= NULL && size > 0 )
	{
	 for(i=0;i<size;i++)
	 {
	 pedido[i].isEmpty=TRUE;
	 }
	 ret=0;
	}
return ret;
}

int printPositionPedido(Pedidos* pedido,int size,int position)
{
	int ret=-1;
	if(pedido!= NULL && size > 0 && pedido[position].isEmpty == FALSE)
	{
		if(pedido[position].isEmpty == FALSE)
		{
				printf("____________________________________________________________________");
				printf("\nidClient:%d \nidPedido:%d \nCantidad_Recoleccion:%d \nEstado:%s\n",
				pedido[position].idCliente,pedido[position].idPedido,
				pedido[position].cantRecoleccion,
				pedido[position].estado);
				printf("____________________________________________________________________\n");
				}
		ret=0;
	}
return ret;
}

int addPedido(Pedidos* pedido,Clients* client,int cant,int size,int *pedidoCount)
{
	int ret=-1;
    int freePosition;
    int idCliente;
    int idPedido;
    int cantRecoleccion;
    int estado;
    int isEmpty;

	if(pedido!= NULL && size > 0 )
	{
	   if(searchFreeSpacePedido(pedido,size,&freePosition)==0)
	   {

	    print(client,cant);
	    (*pedidoCount)++;
	    getInt(idCliente,"\nIngrese el id del cliente: ","\nError!!.Ingrese solo numeros",1,100,2);
	    getInt(cantRecoleccion,"Ingrese cantidad de recoleccion en kilos: ","\nError!!.",1,10000,2);
        pedido[freePosition].idPedido=*pedidoCount;
        pedido[freePosition].idCliente=idCliente;
        pedido[freePosition].estado=1;
		strcpy(pedido[freePosition].cantRecoleccion,cantRecoleccion);
	    pedido[freePosition].isEmpty=FALSE;
		ret=0;
		printPositionPedido(pedido,size,freePosition);
	   }
		else
		{
			printf("\nNo hay mas lugar!!!");
		}
    }
return ret;
}

int searchFreeSpacePedido(Pedidos* pedido,int size,int *freePosition)
{
 int i;
 int ret=-1;

 if(pedido!= NULL && size > 0 )
 {
     for(i=0;i<size;i++)
 		{
 			if(pedido[i].isEmpty==TRUE)
 			{
 				ret=0;
 			    *freePosition=i;
 			}
 		}
 }
return ret;
}

int cargaPedido(Pedidos* pedido,Clients* client,int cant, int size,int *pedidoCount)
{
    int ret=-1;
    int option;


	   if(pedido!=NULL && size>0)
       {
    	    do{
        	 subMenuPedido();
        	 getInt(&option,"\n\nIngrese una opcion:","\n\tERROR!!.Opcion invalida\n",1,4,2);
        	   switch(option)
        	  {
        	  case 1:
        	  printf("\n__Alta");
        	  addPedido(pedido,client,cant,size,&pedidoCount);
        	  break;
        	  case 2:
        	  printf("\n__Modificacion");
        	  changeByIdPedido(pedido,size);
        	  break;
        	  case 3:
        	    printf("\n__Baja");
        	    removeByIdPedido(pedido,size,&pedidoCount);
        	     break;
        	  }
		    }while(option!=4);
    	    ret=0;
       }
 return ret;
}

int changeByIdPedido(Pedidos* pedido, int size)
{
    int ret=-1;
    int position;
    int option;
    int idCliente;
    int cantRecoleccion;

	   if(pedido!=NULL && size>0)
       {
    	    if(findByIdPedido(pedido,size,&position)==0)
    	   {
    	    do{
        	 subMenuChange();
        	 getInt(&option,"\n\nIngrese una opcion:","\n\tERROR!!.Opcion invalida\n",1,3,2);
        	   switch(option)
        	  {
        	  case 1:
        	  printf("\n__Cambiar_Cliente");
              getInt(idCliente,"\nIngrese el nuevo id de cliente: ","\nError!!.",1,100,2);
              pedido[position].idCliente=idCliente;
        	  break;
        	  case 2:
        	  printf("\n__Cambiar localidad__");
        	  getInt(cantRecoleccion,"\nIngrese nueva cantidad de recoleccion en kilos: ","\nError!!.",3,10000,2);
        	  pedido[position].cantRecoleccion=cantRecoleccion;
        	  break;
        	  }
        	   if(option!=3)
        	   {printf("El cambio fue exitoso!!\n");
        	    printPositionPedido(pedido,size,position);
        	    ret=0;
        	    break;
        	   }
		    }while(option!=5);
  		    }
    	    else
            {
        	printf("No existe el id ingresado!!");
            }
       }
 return ret;
}

int removeByIdPedido(Pedidos* pedido, int size,int *pedidoCount)
{
    int ret=-1;
    int position;


    if(pedido!=NULL && size>0 )
    {
        if(findByIdPedido(pedido,size,&position)==0)
        {
        	(*pedidoCount)--;
            pedido[position].idCliente=0;
            pedido[position].isEmpty=TRUE;
            pedido[position].idPedido=0;
            pedido[position].estado=0;
            pedido[position].cantRecoleccion=0;
            ret=0;
            printf("La baja fue exitosa!!");
        }
        else
        {
        	printf("No existe el ID ingresado");
        }
    }
 return ret;
}

int findByIdPedido(Pedidos* pedido,int size,int *position)
{
    int ret=-1;
    int i;
    int idPedido;

    if(pedido!= NULL && size>=0)
    {
    	printPedido(pedido,size);
    	getInt(&idPedido,"\n\nIngrese el ID del pedido: ","\nERROR.",1,1000,2);
        for(i=0;i<size;i++)
        {
            if(pedido[i].isEmpty == FALSE && pedido[i].idPedido==idPedido)
            {
            	*position=i;
                ret=0;
                break;
            }
            else
            {
                 continue;
            }
        }
    }
return ret;
}
